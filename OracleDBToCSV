import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class OracleToCSV {

    // Connection parameters
    private static final String HOST = "localhost"; // Replace with your host
    private static final String PORT = "1521";      // Replace with your port number
    private static final String DATABASE = "XE";    // Replace with your Oracle SID or service name
    private static final String USER = "system";    // Replace with your username
    private static final String PASS = "oracle";    // Replace with your password

    // Hardcoded table names
    private static final String[] TABLES = {"PRODUCTS", "CUSTOMERS", "ORDERS"}; // Replace with your table names

    public static void main(String[] args) {
        Connection connection = null;
        Statement statementForData = null;
        Statement statementForCount = null;

        try {
            // Load the Oracle JDBC Driver
            Class.forName("oracle.jdbc.driver.OracleDriver");

            // Build the Oracle connection URL dynamically
            String dbUrl = "jdbc:oracle:thin:@" + HOST + ":" + PORT + ":" + DATABASE;

            // Open connection to the Oracle database
            connection = DriverManager.getConnection(dbUrl, USER, PASS);

            // Loop through each table name
            for (String table : TABLES) {
                System.out.println("Downloading data from table: " + table);

                // Create separate statements for the data query and the row count query
                statementForData = connection.createStatement();
                statementForCount = connection.createStatement();

                // Query to count the number of rows in the table
                String countQuery = "SELECT COUNT(*) FROM " + table;
                ResultSet countResultSet = statementForCount.executeQuery(countQuery);
                int rowCount = 0;

                if (countResultSet.next()) {
                    rowCount = countResultSet.getInt(1); // Get the row count
                }
                countResultSet.close();  // Explicitly close the count ResultSet

                // Query to get all rows from the table
                String dataQuery = "SELECT * FROM " + table;
                ResultSet dataResultSet = statementForData.executeQuery(dataQuery);

                // Generate the CSV file name based on the table name and row count
                String fileName = table + "_countofrows_" + rowCount + ".csv";

                // Get table data and write to CSV
                writeToCSV(dataResultSet, fileName);

                // Close the data ResultSet
                dataResultSet.close();

                System.out.println("Data saved to " + fileName);
            }

            // Open the folder where the CSV files are located
            java.awt.Desktop.getDesktop().open(new File("."));

        } catch (SQLException | ClassNotFoundException | IOException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (statementForData != null) statementForData.close();
                if (statementForCount != null) statementForCount.close();
                if (connection != null) connection.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }

    // Write the ResultSet data to a CSV file
    private static void writeToCSV(ResultSet resultSet, String fileName) throws SQLException {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            int columnCount = resultSet.getMetaData().getColumnCount();

            // Write the column headers
            for (int i = 1; i <= columnCount; i++) {
                fileWriter.append(resultSet.getMetaData().getColumnName(i));
                if (i < columnCount) {
                    fileWriter.append(",");
                }
            }
            fileWriter.append("\n");

            // Write the rows
            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    String columnTypeName = resultSet.getMetaData().getColumnTypeName(i);
                    
                    // Check if the column is a BLOB or CLOB and handle appropriately
                    if (columnTypeName.equals("BLOB")) {
                        // For BLOB: read as binary data or handle as needed
                        byte[] blobBytes = resultSet.getBytes(i);
                        fileWriter.append(blobBytes != null ? "[BLOB_DATA]" : "NULL");
                    } else if (columnTypeName.equals("CLOB")) {
                        // For CLOB: read as character stream
                        String clobData = resultSet.getString(i);
                        fileWriter.append(clobData != null ? clobData : "NULL");
                    } else {
                        // For all other types (e.g., VARCHAR, INT)
                        String value = resultSet.getString(i);
                        fileWriter.append(value != null ? value : "NULL");
                    }

                    if (i < columnCount) {
                        fileWriter.append(",");
                    }
                }
                fileWriter.append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
