import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class OracleToCSV {

    // Connection parameters
    private static final String HOST = "localhost";     // Replace with your host
    private static final String PORT = "1521";          // Default Oracle port number
    private static final String SERVICE_NAME = "orcl";  // Replace with your Oracle service name or SID
    private static final String USER = "your_username"; // Replace with your Oracle username
    private static final String PASS = "your_password"; // Replace with your Oracle password

    // Hardcoded table names
    private static final String[] TABLES = {"PRODUCTS", "CUSTOMERS", "ORDERS"}; // Replace with your table names

    public static void main(String[] args) {
        Connection connection = null;
        Statement statementForData = null;
        Statement statementForCount = null;
        List<String> tablesWithBlobOrClob = new ArrayList<>();

        try {
            // Load the Oracle JDBC Driver
            Class.forName("oracle.jdbc.driver.OracleDriver");

            // Build the Oracle connection URL dynamically using the service name
            String dbUrl = "jdbc:oracle:thin:@" + HOST + ":" + PORT + "/" + SERVICE_NAME;

            // Open connection to the Oracle database
            connection = DriverManager.getConnection(dbUrl, USER, PASS);

            // Loop through each table name
            for (String table : TABLES) {
                System.out.println("Downloading data from table: " + table);

                // Create separate statements for the data query and the row count query
                statementForData = connection.createStatement();
                statementForCount = connection.createStatement();

                // Query to count the number of rows in the table
                String countQuery = "SELECT COUNT(*) FROM " + table;
                ResultSet countResultSet = statementForCount.executeQuery(countQuery);
                int rowCount = 0;

                if (countResultSet.next()) {
                    rowCount = countResultSet.getInt(1); // Get the row count
                }
                countResultSet.close();  // Explicitly close the count ResultSet

                // Query to get all rows from the table
                String dataQuery = "SELECT * FROM " + table;
                ResultSet dataResultSet = statementForData.executeQuery(dataQuery);

                // Generate the CSV file name based on the table name and row count
                String fileName = table + "_countofrows_" + rowCount + ".csv";

                // Get table data and write to CSV
                boolean containsBlobOrClob = writeToCSV(dataResultSet, fileName);

                // Close the data ResultSet
                dataResultSet.close();

                if (containsBlobOrClob) {
                    tablesWithBlobOrClob.add(table); // Record table if it has BLOB or CLOB columns
                }

                System.out.println("Data saved to " + fileName);
            }

            // Open the folder where the CSV files are located
            java.awt.Desktop.getDesktop().open(new File("."));

            // Print the tables with BLOB or CLOB columns
            if (!tablesWithBlobOrClob.isEmpty()) {
                System.out.println("Tables with BLOB or CLOB columns: ");
                for (String table : tablesWithBlobOrClob) {
                    System.out.println(table);
                }
            } else {
                System.out.println("No tables with BLOB or CLOB columns found.");
            }

        } catch (SQLException | ClassNotFoundException | IOException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (statementForData != null) statementForData.close();
                if (statementForCount != null) statementForCount.close();
                if (connection != null) connection.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }

    // Write the ResultSet data to a CSV file in UTF-8 format and return whether BLOB or CLOB columns are present
    private static boolean writeToCSV(ResultSet resultSet, String fileName) throws SQLException {
        boolean containsBlobOrClob = false;

        try (OutputStreamWriter outputStreamWriter = 
                 new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8)) {
            int columnCount = resultSet.getMetaData().getColumnCount();

            // Write the column headers
            for (int i = 1; i <= columnCount; i++) {
                outputStreamWriter.append(resultSet.getMetaData().getColumnName(i));
                if (i < columnCount) {
                    outputStreamWriter.append(",");
                }
            }
            outputStreamWriter.append("\n");

            // Write the rows
            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    String columnTypeName = resultSet.getMetaData().getColumnTypeName(i);

                    // Check if the column is a BLOB or CLOB and handle appropriately
                    if (columnTypeName.equals("BLOB")) {
                        containsBlobOrClob = true;
                        byte[] blobBytes = resultSet.getBytes(i);
                        outputStreamWriter.append(blobBytes != null ? "[BLOB_DATA]" : "NULL");
                    } else if (columnTypeName.equals("CLOB")) {
                        containsBlobOrClob = true;
                        String clobData = resultSet.getString(i);
                        outputStreamWriter.append(clobData != null ? escapeCSV(clobData) : "NULL");
                    } else {
                        // For all other types (e.g., VARCHAR, INT)
                        String value = resultSet.getString(i);
                        outputStreamWriter.append(value != null ? escapeCSV(value) : "NULL");
                    }

                    if (i < columnCount) {
                        outputStreamWriter.append(",");
                    }
                }
                outputStreamWriter.append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return containsBlobOrClob;
    }

    // Escape values for CSV format
    private static String escapeCSV(String value) {
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            // Escape any existing double quotes in the value by doubling them
            value = "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }
}
